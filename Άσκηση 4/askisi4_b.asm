.arm
.text
.global main
main:
STMDB R13!, {R0-R12,R14}
LDR R1, =Const
LDR R2, =Result
MOV R3, #0 
MOV R4, #0 
BL Subrtn
BL Subrtn
BL Subrtn
BL Subrtn
LDRB R4,[R2,#0] @Μεταφέρουμε στον R4 το byte της διεύθυνσης 
μνήμης όπου δείχνει ο R2(δηλαδή το x0)
MOV R3,#1 @Μεταφέρουμε στον R3 τη τιμή 1 για να μεταφερθούμε στο 
byte της επόμενης διεύθυνσης μνήμης όπου δείχνει ο R2 όταν μπούμε 
μέσα στον βρόχο επανάληψης
Startpoint: 
LDRB R12,[R2,R3] @Μεταφέρουμε στον R12 το byte της επόμενης
διεύθυνσης μνήμης όπου δείχνει ο R2 (δηλαδή το x1)
CMP R12,R4 @Συγκρίνουμε το περιεχόμενο του R12 με του R4 (δηλαδή 
τα xi ανά δύο κάθε φορά) με τη πράξη της αφαίρεσης R4-R12
MOVHI R4,R12 @Αν το περιεχόμενο του R12 είναι μεγαλύτερο από 
αυτό του R4 τότε αποθηκεύουμε στον R4 τη τιμή του R12
ADD R3,R3,#1 @Αυξάνουμε το περιεχόμενο του R3 κατά 1 για να 
μεταβούμε στο byte της επόμενης διεύθυνσης όπου δείχνει ο R2
CMP R3,#3 @Συγκρίνουμε το περιεχόμενο του R3 με το 3 ώστε να 
πραγματοποιηθούν 4 επαναλήψεις
BLE Startpoint
STRB R4,[R1,#3] @Αποθηκεύουμε στο 4ο byte του πίνακα Const το 
περιεχόμενο του R4 ο οποίος περιέχει το μέγιστο αποτέλεσμα που 
δίνει η παράσταση
STRB R3,[R1,#4] @Αποθηκεύουμε στο 5ο byte του πίνακα Const το 
περιεχόμενο του R3 ο οποίος περιέχει το νούμερο του συνόλου
LDMIA R13!, {R0-R12,R14}
MOV PC,LR
Subrtn:
STMDB R13!, {R0-R11,R14}
LDR R0, =Values
ADD R0,R0,R4
MOV R5, #5
LDRB R6, [R0,#0]
LDRB R7, [R0,#1]
LDRB R8, [R0,#2]
LDRB R9, [R7,#0]
LDRB R10, [R7,#1]
LDRB R11, [R7,#2]
MUL R6,R9,R6
MUL R7,R10,R7
MUL R8,R11,R8
ADD R6,R7,R6
SUB R6,R6,R8
MUL R0,R5,R6
MOV R0,R0,ASR #6
STRB R0, [R2,R3]
ADD R4,R4,#3
ADD R3,R3,#1
LDMIA R13!,{R1-R6}
MOV PC,LR
.data
Values:
.byte 0x02, 0x03, 0x04
.byte 0x10, 0x05, 0x06
.byte 0x0B, 0x02, 0x0D
.byte 0x01, 0x0C, 0x08
Const:
.byte 0x04, 0x07, 0x05,0,0
Result:
.byte 0,0,0,0
