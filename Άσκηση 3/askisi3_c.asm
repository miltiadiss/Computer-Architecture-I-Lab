.arm
.text
.global main
main:
STMDB R13!, {R0-R12,R14}
MOV R0, #0 @Μεταφέρουμε στον R0 τη τιμή 0 και θα τον χρησιμοποιήσουμε 
ως μετρητή στο βρόχο επανάληψης
MOV R1, #1 @Μεταφέρουμε στον R1 τη τιμή 1 η οποία είναι ο πρώτος όρος 
α0 της ακολουθίας Fibonacci
MOV R2, #2 @Μεταφέρουμε στον R2 τη τιμή 2 η οποία είναι ο δεύτερος 
όρος α1 της ακολουθίας Fibonacci
Startpoint:
LDR R3, = Stor @Ο R3 δείχνει στις 6 θέσεις μνήμης του πίνακα Stor
LDR R4, = Stor @Ο R4 δείχνει επίσης στις 6 θέσεις μνήμης του πίνακα 
Stor
LDR R5, = Stor @Ο R5 δείχνει επίσης στις 6 θέσεις μνήμης του πίνακα 
Stor
LDR R3, [R3,R0] @Μεταφέρει το περιεχόμενο της θέσης μνήμης με 
διεύθυνση το άθροισμα των διευθύνσεων των R3, R0 στον καταχωρητή R3 
δηλαδή στην ουσία τον αn-2 όρο της ακολουθίας 
LDR R4, [R4,R1] @Μεταφέρει το περιεχόμενο της θέσης μνήμης με 
διεύθυνση το άθροισμα των διευθύνσεων των R4, R1 στον καταχωρητή R4 
δηλαδή στην ουσία τον αn-1 όρο της ακολουθίας
ADD R4 , R4 , R3 @Προσθέτουμε τις τιμές των R3, R4 (αn-2 και αn-1) και 
το αποτέλεσμα το αποθηκεύουμε πάλι στον R4 δηλαδή στην ουσία τον όρο 
αn της ακολουθίας
STR R4, [R5,R2]
ADD R0, R0, #1 @Αυξάνουμε την τιμή του R0 - μετρητή κατά 1
ADD R1, R1, #1 @Αυξάνουμε την τιμή του R1 κατά 1
ADD R2, R2, #1 @Αυξάνουμε την τιμή του R2 κατά 1
CMP R0,#4 @Όσο το περιεχόμενο του R0 δεν είναι 4 ο βρόχος 
επαναλαμβάνεται προκειμένου να αποθηκεύσουμε και στις υπόλοιπες 4 
θέσεις μνήμης του πίνακα Stor τους όρους α3 ως α6 της ακολουθίας 
Fibonacci καθώς οι πρώτοι δύο όροι είναι γνωστοί και τους έχουμε 
αποθηκεύσει από πριν στις πρώτες δύο θέσεις του πίνακα
BNE LOOP
LDMIA R13!, {R0-R12, PC}
.data
Stor:
.word 0,0,0,0,0,0
